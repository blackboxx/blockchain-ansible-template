- name: Create & configure Azure blockchain infrastructure
  hosts: localhost
  connection: local

  vars_prompt:
    - name: "nameRandom"
      prompt: "Enter random RG suffix"
      private: no
#  - name: "ethereumAccountPsswd"
#    prompt: "Enter Ethereum Account Password"
#    private: yes
#  - name: "ethereumAccountPassphrase"
#    prompt: "Enter Ethereum Account Passphrase"
#    private: yes

  vars:
    ethereumAccountPsswd: "SupertajneHeslo123"
    ethereumAccountPassphrase: "SupertajneHeslo123"
    location: westeurope
    fileLocation: https://raw.githubusercontent.com/luberan/blockchain-ansible-template/master/ansible-template-1dc/
    subscription_id: 315e66d2-b933-43ae-9af1-e401260cff54
    adminSSHKey: "ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAnkcRVB1hFReDvvW9BeO3RHkmBdhTe1e4Mo7Mnq/s1WlM4SPz5gSnp++PfJzdNdpgSHayxc5mLxGHazcHlctr+n0myv32pQEAiWD6nRGy9D+lOy7EfH7Q8SHDRLSht0S3uUSshH+EgJomDsLVAfIr5biqJkjc+M6OPHXNd/U0kxDVldVnZN06n36OxBkK6uO0h2Lw+x1cw57AjwsRUYWD0KA85+f9gkAxFQVbsperJS7WztzUYjA7pjqivwqyMO84W8+QBowrxcUcDRhTIOYMVFusTUcebKJ76XNwkhMuwv56GblnUC6P4moAv2B+Qb9DftNmf93kdEeFnyFxmdXgMw== rsa-key-20180207"
    rgname: '{{ namePrefix + "-" + location + nameRandom}}'
    namePrefix: eth
    companyName: trask
    namingInfix: '{{ namePrefix + companyName }}'
    adminUsername: gethadmin
    numConsortiumMembers: 2
    numMiningNodesPerMember: 1
    txNodeVMSize: Standard_A1_v2
    numTXNodes: 1
    mnNodeVMSize: Standard_A1_v2
    availabilitySetName: AvSet
    httpPort: 80
    adminSitePort: 3000
    sshPort: 22
    sshNATFrontEndStartingPort: 3000
    gethRPCPort: 8545
    loadBalancerInboundNatRuleNamePrefix: ssh-vm
    numMNNodes: '{{ numConsortiumMembers * numMiningNodesPerMember }}'
    loadBalancerName: '{{ namingInfix + "-lb" }}'
    loadBalancerBackendAddressPoolName: LoadBalancerBackend1
    mnVMNamePrefix: '{{ namingInfix + "-mn" }}'
    mnNICPrefix: nic-mn
    txVMNamePrefix: '{{ namingInfix + "-tx" }}'
    txSubnetName: '{{ namingInfix + "tx" }}'
    txSubnetPrefix: 10.0.0.0/24
    txNIPrefix: nic-tx
    virtualNetworkName: '{{ namingInfix + "vnet" }}'
    txNsgName: '{{ namingInfix + "TXNsg" }}'
    mnNsgName: '{{ namingInfix + "MNNsg" }}'
    addressPrefix: 10.0.0.0/20
    vnetID: '{{ "/subscriptions/" + subscription_id + "/resourceGroup/" + rg + "/providers/Microsoft.Network/virtualNetworks" }}'
    numSubnets: '{{ numConsortiumMembers }}'
    ubuntuImage: {
      "publisher": "Canonical",
      "offer": "UbuntuServer",
      "sku": "16.04-LTS",
      "version": "latest"
    }
    ethereumNetworkID: 72
    maxPeers: 25
    txNode: 0
    gethIPCPort: 30303

  tasks:

# Generating unique string for public IP prefix
  - name: Generate UUID for public IP prefix 
    local_action: shell uuidgen 
    register: dnsHostName 

# Creating Resource Group
  - name: Create resource group
    azure_rm_resourcegroup:
      name: '{{ rgname }}'
      location: '{{ location }}'

# Creating Virtual Network
  - name: Create virtual network
    azure_rm_virtualnetwork:
      resource_group: '{{ rgname }}'
      name: '{{ virtualNetworkName }}'
      address_prefixes: '{{ addressPrefix }}'

# Creating NSG for MN nodes
  - name: Create NSG for MN nodes
    azure_rm_securitygroup:
      resource_group: '{{ rgname }}'
      name: '{{ mnNsgName }}'
      rules:
        - name: block-bootnodes
          description: Block Internet Bootnodes
          protocol: "*"
          destination_port_range: 30303
          source_port_range: "*"
          source_address_prefix: "*"
          destination_address_prefix: Internet
          access: Deny
          priority: 100
          direction: Outbound

# Creating NSG for TX nodes
  - name: Create NSG for TX nodes
    azure_rm_securitygroup:
      resource_group: '{{ rgname }}'
      name: '{{ txNsgName }}'
      rules:
        - name: allow-ssh
          description: Allow SSH
          protocol: "*"
          destination_port_range: 22
          source_port_range: "*"
          source_address_prefix: "*"
          destination_address_prefix: "*"
          access: Allow
          priority: 100
          direction: Inbound
        - name: allow-geth-rpc
          description: Allow geth RPC
          protocol: "*"
          destination_port_range: 8545
          source_port_range: "*"
          source_address_prefix: "*"
          destination_address_prefix: "*"
          access: Allow
          priority: 101
          direction: Inbound
        - name: allow-etheradmin
          description: Allow etheradmin web service
          protocol: "*"
          destination_port_range: 3000
          source_port_range: "*"
          source_address_prefix: "*"
          destination_address_prefix: "*"
          access: Allow
          priority: 102
          direction: Inbound
        - name: block-bootnodes
          description: Block Internet Bootnodes
          protocol: "*"
          destination_port_range: 30303
          source_port_range: "*"
          source_address_prefix: "*"
          destination_address_prefix: Internet
          access: Deny
          priority: 100
          direction: Outbound

# Creating subnet for TX nodes
  - name: Add TX subnet
    azure_rm_subnet:
      resource_group: '{{ rgname }}'
      name: '{{ txSubnetName }}'
      address_prefix: '{{ txSubnetPrefix }}'
      virtual_network: '{{ virtualNetworkName }}'
      security_group_name: '{{ txNsgName }}'

# Creating subnets for MN nodes
  - name: Add MN subnet
    azure_rm_subnet:
      resource_group: '{{ rgname }}'
      name: '{{ namingInfix + "snet-mn" + item }}'
      address_prefix: '{{ "10.0." + item + ".0/24" }}'
      virtual_network: '{{ virtualNetworkName }}'
      security_group_name: '{{ mnNsgName }}'
    with_sequence: start=1 end='{{ numSubnets }}'

# Creating Availability Set
  - name: Add Availability Set
    azure_rm_availabilityset:
      name: '{{ availabilitySetName }}'
      resource_group: '{{ rgname }}'
      sku: Aligned

# Creating Load Balancer
  - name: Add LoadBalancer for TX nodes
    azure_rm_deployment:
      resource_group_name: '{{ rgname }}'
      location: '{{ location }}'
      parameters:
        loadBalancerName:
          value: '{{ loadBalancerName }}'
        dnsHostName:
          value: '{{ namingInfix + dnsHostName.stdout.split("-")[0] }}'
        loadBalancerBackendAddressPoolName:
          value: '{{ loadBalancerBackendAddressPoolName }}'
        loadBalancerInboundNatRuleNamePrefix:
          value: '{{ loadBalancerInboundNatRuleNamePrefix }}'
        frontendPort1:
          value: '{{ httpPort }}'
        backendPort1:
          value: '{{ adminSitePort }}'
        frontendPort2:
          value: '{{ gethRPCPort }}'
        backendPort2:
          value: '{{ gethRPCPort }}'
        numInboundNATRules:
          value: '{{ numTXNodes }}'
        inboundNATRuleFrontendStartingPort:
          value: '{{ sshNATFrontEndStartingPort }}'
        inboundNATRuleBackendPort:
          value: '{{ sshPort }}'
        location:
          value: '{{ location }}'
      template_link: '{{ fileLocation + "loadBalancer.json" }}'

# Deploying TX nodes
  - name: Deploy TX nodes
    azure_rm_deployment:
      resource_group_name: '{{ rgname }}'
      location: '{{ location }}'
      parameters:
        loadBalancerName:
          value: '{{ loadBalancerName }}'
        loadBalancerBackendAddressPoolName:
          value: '{{ loadBalancerBackendAddressPoolName }}'
        loadBalancerInboundNatRuleNamePrefix:
          value: '{{ loadBalancerInboundNatRuleNamePrefix }}'
        virtualNetworkName:
          value: '{{ virtualNetworkName }}'
        txVMNamePrefix:
          value: '{{ txVMNamePrefix }}'
        txNIPrefix:
          value: '{{ txNIPrefix }}'
        availabilitySetName:
          value: '{{ availabilitySetName }}'
        txNodeVMSize:
          value: '{{ txNodeVMSize }}'
        adminUsername:
          value: '{{ adminUsername }}'
        adminSSHKey:
          value: '{{ adminSSHKey }}'
        txSubnetName:
          value: '{{ txSubnetName }}'
        ubuntuImage:
          value: '{{ ubuntuImage }}'
        location:
          value: '{{ location }}'
        index:
          value: '{{ item }}'
      template_link: '{{ fileLocation + "txVMAuth-sshPublicKey.json" }}'
    with_sequence: start=0 end='{{ numTXNodes - 1 }}'
    register: tx_nodes
    async: 7200
    poll: 0


# Deploying MN nodes
  - name: Deploy MN nodes
    azure_rm_deployment:
      resource_group_name: '{{ rgname }}'
      location: '{{ location }}'
      parameters:
        virtualNetworkName:
          value: '{{ virtualNetworkName }}'
        mnVMNamePrefix:
          value: '{{ mnVMNamePrefix }}'
        mnNICPrefix:
          value: '{{ mnNICPrefix }}'
        mnNodeVMSize:
          value: '{{ mnNodeVMSize }}'
        adminUsername:
          value: '{{ adminUsername }}'
        adminSSHKey:
          value: '{{ adminSSHKey }}'
        ubuntuImage:
          value: '{{ ubuntuImage }}'
        location:
          value: '{{ location }}'
        index:
          value: '{{ item }}'
        mnSubnetName:
          value: '{{ namingInfix + "snet-mn" + ((((item)|int / numMiningNodesPerMember)|int + 1)|string) }}'
      template_link: '{{ fileLocation + "mnVMAuth-sshPublicKey.json" }}'
    with_sequence: start=0 end='{{ (numMNNodes)|int - 1 }}'
    register: mn_nodes
    async: 7200
    poll: 0

# Waiting for nodes creation to complete
  - name: Wait for nodes creation to complete
    async_status: 
      jid: '{{ item.ansible_job_id }}'
    register: creation_jobs
    until: creation_jobs.finished
    retries: 300
    with_items: '{{ mn_nodes.results }}'

# Configuring TX nodes
  - name: Configure TX nodes
    azure_rm_deployment:
      resource_group_name: '{{ rgname }}'
      location: '{{ location }}'
      parameters:
        numBootNodes:
          value: '{{ numConsortiumMembers }}'
        txVMNamePrefix:
          value: '{{ txVMNamePrefix }}'
        numTXNodes:
          value: '{{ numTXNodes }}'
        mnVMNamePrefix:
          value: '{{ mnVMNamePrefix }}'
        numMNNodes:
          value: '{{ numMNNodes }}'
        fileLocation:
          value: '{{ fileLocation }}'
        adminUsername:
          value: '{{ adminUsername }}'
        ethereumAccountPsswd:
          value: '{{ ethereumAccountPsswd }}'
        ethereumAccountPassphrase:
          value: '{{ ethereumAccountPassphrase }}'
        ethereumNetworkID:
          value: '{{ ethereumNetworkID }}'
        gethIPCPort:
          value: '{{ gethIPCPort }}'
        adminSitePort:
          value: '{{ adminSitePort }}'
        location:
          value: '{{ location }}'
        index:
          value: '{{ item }}'
      template_link: '{{ fileLocation + "vmExtension-tx.json" }}'
    with_sequence: start=0 end='{{ numTXNodes - 1 }}'
    register: tx_nodes
    async: 7200
    poll: 0

# Configuring MN nodes
  - name: Configure MN nodes
    azure_rm_deployment:
      resource_group_name: '{{ rgname }}'
      location: '{{ location }}'
      parameters:
        numBootNodes:
          value: '{{ numConsortiumMembers }}'
        mnVMNamePrefix:
          value: '{{ mnVMNamePrefix }}'
        numMNNodes:
          value: '{{ numMNNodes }}'
        fileLocation:
          value: '{{ fileLocation }}'
        adminUsername:
          value: '{{ adminUsername }}'
        ethereumAccountPsswd:
          value: '{{ ethereumAccountPsswd }}'
        ethereumAccountPassphrase:
          value: '{{ ethereumAccountPassphrase }}'
        ethereumNetworkID:
          value: '{{ ethereumNetworkID }}'
        gethIPCPort:
          value: '{{ gethIPCPort }}'
        location:
          value: '{{ location }}'
        index:
          value: '{{ item }}'
      template_link: '{{ fileLocation + "vmExtension-mn.json" }}'
    with_sequence: start=0 end='{{ (numMNNodes)|int - 1 }}'
    register: mn_nodes
    async: 7200
    poll: 0

# Waiting for nodes configuration to complete
  - name: Wait for nodes configuration to complete
    async_status: jid={{ item.ansible_job_id }}
    register: creation_jobs
    until: creation_jobs.finished
    retries: 300
    with_items: mn_nodes.results