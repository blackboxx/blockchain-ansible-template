# Generating unique string for public IP prefix
  - name: Generate UUID for public IP prefix 
    local_action: shell uuidgen 
    register: dnsHostName 

# Creating Resource Group
  - name: Create resource group
    azure_rm_resourcegroup:
      name: '{{ rgname1 }}'
      location: '{{ location1 }}'

# Creating Virtual Network
  - name: Create virtual network
    azure_rm_virtualnetwork:
      resource_group: '{{ rgname1 }}'
      name: '{{ virtualNetworkName }}'
      address_prefixes: '{{ addressPrefix }}'

# Creating NSG for MN nodes
  - name: Create NSG for MN nodes
    azure_rm_securitygroup:
      resource_group: '{{ rgname1 }}'
      name: '{{ mnNsgName }}'
      rules:
        - name: block-bootnodes
          description: Block Internet Bootnodes
          protocol: "*"
          destination_port_range: 30303
          source_port_range: "*"
          source_address_prefix: "*"
          destination_address_prefix: Internet
          access: Deny
          priority: 100
          direction: Outbound

# Creating NSG for TX nodes
  - name: Create NSG for TX nodes
    azure_rm_securitygroup:
      resource_group: '{{ rgname1 }}'
      name: '{{ txNsgName }}'
      rules:
        - name: allow-ssh
          description: Allow SSH
          protocol: "*"
          destination_port_range: 22
          source_port_range: "*"
          source_address_prefix: "*"
          destination_address_prefix: "*"
          access: Allow
          priority: 100
          direction: Inbound
        - name: allow-geth-rpc
          description: Allow geth RPC
          protocol: "*"
          destination_port_range: 8545
          source_port_range: "*"
          source_address_prefix: "*"
          destination_address_prefix: "*"
          access: Allow
          priority: 101
          direction: Inbound
        - name: allow-etheradmin
          description: Allow etheradmin web service
          protocol: "*"
          destination_port_range: 3000
          source_port_range: "*"
          source_address_prefix: "*"
          destination_address_prefix: "*"
          access: Allow
          priority: 102
          direction: Inbound
        - name: block-bootnodes
          description: Block Internet Bootnodes
          protocol: "*"
          destination_port_range: 30303
          source_port_range: "*"
          source_address_prefix: "*"
          destination_address_prefix: Internet
          access: Deny
          priority: 100
          direction: Outbound

# Creating subnet for TX nodes
  - name: Add TX subnet
    azure_rm_subnet:
      resource_group: '{{ rgname1 }}'
      name: '{{ txSubnetName }}'
      address_prefix: '{{ txSubnetPrefix }}'
      virtual_network: '{{ virtualNetworkName }}'
      security_group_name: '{{ txNsgName }}'

# Creating subnets for MN nodes
  - name: Add MN subnet
    azure_rm_subnet:
      resource_group: '{{ rgname1 }}'
      name: '{{ namingInfix + "snet-mn" + item }}'
      address_prefix: '{{ "10.0." + item + ".0/24" }}'
      virtual_network: '{{ virtualNetworkName }}'
      security_group_name: '{{ mnNsgName }}'
    with_sequence: start=1 end='{{ numSubnets }}'

# Creating Availability Set
  - name: Add Availability Set
    azure_rm_availabilityset:
      name: '{{ availabilitySetName }}'
      resource_group: '{{ rgname1 }}'
      sku: Aligned

# Creating Load Balancer
  - name: Add LoadBalancer for TX nodes
    azure_rm_deployment:
      resource_group_name: '{{ rgname1 }}'
      location: '{{ location1 }}'
      parameters:
        loadBalancerName:
          value: '{{ loadBalancerName }}'
        dnsHostName:
          value: '{{ dnsHostName.stdout.split("-")[0] + namingInfix }}'
        loadBalancerBackendAddressPoolName:
          value: '{{ loadBalancerBackendAddressPoolName }}'
        loadBalancerInboundNatRuleNamePrefix:
          value: '{{ loadBalancerInboundNatRuleNamePrefix }}'
        frontendPort1:
          value: '{{ httpPort }}'
        backendPort1:
          value: '{{ adminSitePort }}'
        frontendPort2:
          value: '{{ gethRPCPort }}'
        backendPort2:
          value: '{{ gethRPCPort }}'
        numInboundNATRules:
          value: '{{ numTXNodes }}'
        inboundNATRuleFrontendStartingPort:
          value: '{{ sshNATFrontEndStartingPort }}'
        inboundNATRuleBackendPort:
          value: '{{ sshPort }}'
        location:
          value: '{{ location1 }}'
      template_link: '{{ artifactsLocationURL + "loadBalancer.json"}}'

# Deploying TX nodes
  - name: Deploy TX nodes
    azure_rm_deployment:
      resource_group_name: '{{ rgname1 }}'
      location: '{{ location1 }}'
      parameters:
        loadBalancerName:
          value: '{{ loadBalancerName }}'
        loadBalancerBackendAddressPoolName:
          value: '{{ loadBalancerBackendAddressPoolName }}'
        loadBalancerInboundNatRuleNamePrefix:
          value: '{{ loadBalancerInboundNatRuleNamePrefix }}'
        virtualNetworkName:
          value: '{{ virtualNetworkName }}'
        txVMNamePrefix:
          value: '{{ txVMNamePrefix }}'
        txNIPrefix:
          value: '{{ txNIPrefix }}'
        availabilitySetName:
          value: '{{ availabilitySetName }}'
        txNodeVMSize:
          value: '{{ txNodeVMSize }}'
        adminUsername:
          value: '{{ adminUsername }}'
        adminSSHKey:
          value: '{{ adminSSHKey }}'
        txSubnetName:
          value: '{{ txSubnetName }}'
        ubuntuImage:
          value: '{{ ubuntuImage }}'
        location:
          value: '{{ location1 }}'
        index:
          value: '{{ item }}'
      template_link: '{{ artifactsLocationURL + "txVMAuth-sshPublicKey.json" }}'
    with_sequence: start=0 end='{{ (numTXNodes)|int - 1 }}'

# Deploying MN nodes
  - name: Deploy MN nodes
    azure_rm_deployment:
      resource_group_name: '{{ rgname1 }}'
      location: '{{ location1 }}'
      parameters:
        virtualNetworkName:
          value: '{{ virtualNetworkName }}'
        mnVMNamePrefix:
          value: '{{ mnVMNamePrefix }}'
        mnNICPrefix:
          value: '{{ mnNICPrefix }}'
        namingInfix:
          value: '{{ namingInfix }}'
        mnNodeVMSize:
          value: '{{ mnNodeVMSize }}'
        adminUsername:
          value: '{{ adminUsername }}'
        adminSSHKey:
          value: '{{ adminSSHKey }}'
        ubuntuImage:
          value: '{{ ubuntuImage }}'
        location:
          value: '{{ location1 }}'
        index:
          value: '{{ item }}'
        mnSubnetName:
          value: '{{ namingInfix + "snet-mn" + ((((item)|int / numMiningNodesPerMember)|int + 1)|string) }}'
      template_link: '{{ artifactsLocationURL + "mnVMAuth-sshPublicKey.json" }}'
    with_sequence: start=0 end='{{ (numMNNodes)|int - 1 }}'